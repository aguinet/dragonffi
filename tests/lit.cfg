# Copyright 2018 Adrien Guinet <adrien@guinet.me>
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import lit
import os
import platform
import subprocess

config.name = "dragonffi"
config.test_source_root = os.path.dirname(__file__)
config.suffixes = ['.cpp']
config.test_format = lit.formats.ShTest(True)

def get_llvm_tool(name):
    ret = os.path.join(config.llvm_bindir,name + config.exe_suffix)
    if os.path.exists(ret): return ret
    ret = os.path.join(config.llvm_bindir,"../libexec/llvm/" + name + config.exe_suffix)
    if os.path.exists(ret): return ret
    raise RuntimeError("unable to find %s!" % name)

# substitutions
config.substitutions.append(("%build_dir",config.build_dir))
config.substitutions.append(("%llvm_bindir",config.llvm_bindir))
config.substitutions.append(("%FileCheck",get_llvm_tool("FileCheck")))
config.substitutions.append(("%count",get_llvm_tool("count")))
config.substitutions.append(("%exeext",config.exe_suffix))
config.substitutions.append(("%clang", config.llvm_bindir + "/clang" + config.exe_suffix))

TEST_dlopen_LDFLAGS = ""
if platform.system() == "Darwin":
    config.available_features.add("darwin")
    # Get the sysroot thanks to xcrun and set the DFFI_SYSROOT environment variable
    sysroot = subprocess.check_output(["xcrun", "--show-sdk-path"]).strip()
    config.environment["DFFI_SYSROOT"] = sysroot
    TEST_dlopen_LDFLAGS = f"-L{sysroot.decode()}/usr/lib/"
if platform.system() == "Linux":
    config.available_features.add("linux")
if platform.system() in ("Darwin","Linux"):
    config.available_features.add("posix")

if platform.system() == "Windows":
    # Add the current build directory to the path, so that executables can load
    # dffi.dll (no rpath equivalent on windows)
    config.environment['PATH'] += ";" + config.dffi_lib_dir.replace("/","\\")

config.substitutions.append(("%TEST_dlopen_LDFLAGS", TEST_dlopen_LDFLAGS))
